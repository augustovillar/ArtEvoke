services:
  mysql:
    image: mysql:8.0
    container_name: local-mysql
    restart: unless-stopped
    ports:
      - "3306:3306"
    env_file:
      - ./data/db/.env.mysql
    command: [
      "mysqld",
      "--default-authentication-plugin=mysql_native_password",
      "--character-set-server=utf8mb4",
      "--collation-server=utf8mb4_unicode_ci",
      "--sql-mode=STRICT_ALL_TABLES",
      "--innodb_print_all_deadlocks=ON"
    ]
    volumes:
      - mysql_data:/var/lib/mysql
      - ./data/db/my.cnf:/etc/mysql/conf.d/my.cnf:ro
      - ./data/db/schemas:/docker-entrypoint-initdb.d:ro
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "127.0.0.1", "-uroot", "-p${MYSQL_ROOT_PASSWORD}"]
      start_period: 120s
      interval: 15s
      timeout: 10s
      retries: 20
    networks:
      - app_network

  qdrant:
    image: qdrant/qdrant:latest
    container_name: artevoke_qdrant
    restart: unless-stopped
    ports:
      - "6333:6333"
      - "6334:6334"
    volumes:
      - qdrant_data:/qdrant/storage
      - ./data/vector_db:/qdrant/snapshots
    environment:
      - QDRANT__SERVICE__HTTP_PORT=6333
      - QDRANT__SERVICE__GRPC_PORT=6334
    command: >
      sh -c '
        echo "Starting Qdrant with automatic snapshot restoration..."
        
        # Build snapshot arguments dynamically
        SNAPSHOT_ARGS=""
        for snapshot in /qdrant/snapshots/*.snapshot; do
          if [ -f "$$snapshot" ]; then
            collection_name=$$(basename "$$snapshot" .snapshot)
            echo "Found snapshot: $$snapshot -> collection: $$collection_name"
            SNAPSHOT_ARGS="$$SNAPSHOT_ARGS --snapshot $$snapshot:$$collection_name"
          fi
        done
        
        echo "Snapshot arguments: $$SNAPSHOT_ARGS"
        
        # Start Qdrant with snapshot restoration
        if [ -n "$$SNAPSHOT_ARGS" ]; then
          echo "Starting Qdrant with snapshots..."
          exec /qdrant/qdrant $$SNAPSHOT_ARGS
        else
          echo "No snapshots found, starting Qdrant normally..."
          exec /qdrant/qdrant
        fi
      '
    networks:
      - app_network

  backend:
    build:
      context: ./FastAPI
    depends_on:
      mysql:
        condition: service_healthy
      qdrant:
        condition: service_started
    env_file:
      - ./FastAPI/.env
    environment:
      - STATIC_DIR=/data/static
      - DATA_DIR=/data
    volumes:
      - ./FastAPI:/app
      - ./data:/app/data 
      - ~/.cache/huggingface:/root/.cache/huggingface  # Cache all Hugging Face models
    networks:
      - app_network
    deploy:
      resources:
        reservations:
          devices:
            - driver: nvidia
              count: all
              capabilities: [gpu]

  frontend:
    build:
      context: ./frontend
      args:
        REACT_APP_API_URL: /api
    depends_on:
      - backend
    networks:
      - app_network
    volumes:
      - ./frontend/src:/app/src:ro
      - ./frontend/public:/app/public:ro
      - /app/node_modules

  nginx:
    image: nginx:latest
    container_name: artevoke_nginx
    ports:
      - "80:80"
      - "443:443"
    environment:
      - NGINX_CONFIG=nginx-local.conf
    volumes:
      - ./nginx/${NGINX_CONFIG}:/etc/nginx/conf.d/default.conf:ro
      - /etc/letsencrypt:/etc/letsencrypt:ro
      - /var/lib/letsencrypt:/var/lib/letsencrypt
    depends_on:
      - frontend
      - backend
    networks:
      - app_network
  phpmyadmin:
    image: phpmyadmin/phpmyadmin:latest
    container_name: local-phpmyadmin
    restart: unless-stopped
    ports:
      - "8080:80"
    environment:
      - PMA_HOST=mysql
      - PMA_PORT=3306
      - PMA_USER=appuser
      - PMA_PASSWORD=changeme_app
    depends_on:
      - mysql
    networks:
      - app_network

volumes:
  mysql_data:
  qdrant_data:

networks:
  app_network:
    driver: bridge